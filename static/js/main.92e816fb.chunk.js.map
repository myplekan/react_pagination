{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","numberPag","Math","ceil","count","countArr","i","push","countPagination","changeCheck","numPage","className","cn","disabled","href","onClick","map","item","active","items","from","to","numbers","n","getNumbers","options","App","useState","setCurrentPage","setPerPage","firstItem","lastItem","pageItems","slice","id","value","onChange","event","target","option","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"oNAUaA,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAYC,KAAKC,KAAKN,EAAQC,GAYpC,IAAMM,EAVN,WAGE,IAFA,IAAMC,EAAqB,GAElBC,EAAI,EAAGA,GAAKL,EAAWK,GAAK,EACnCD,EAASE,KAAKD,GAGhB,OAAOD,EAGKG,GAEd,SAASC,EAAYC,GACfA,EAAU,GAAKA,EAAUT,GAAaS,IAAYX,GACpDC,EAAaU,GAIjB,OACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAG,YAAa,CAAEC,SAA0B,IAAhBd,IAA3C,SACE,mBACE,UAAQ,WACRY,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBf,EACfgB,QAAS,WACPN,EAAYV,EAAc,IAN9B,oBAaDK,EAAMY,KAAI,SAAAC,GAAI,OACb,oBACEN,UAAWC,IAAG,YAAa,CAAEM,OAAQnB,IAAgBkB,IADvD,SAIE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,WACPf,EAAaiB,IALjB,SAQGA,KAVEA,MAeT,oBAAIN,UAAWC,IAAG,YAAa,CAAEC,SAAUd,IAAgBE,IAA3D,SACE,mBACE,UAAQ,WACRU,UAAU,YACVG,KAAK,QACL,gBAAef,IAAgBE,EAC/Bc,QAAS,WACPN,EAAYV,EAAc,IAN9B,wBCjEFoB,ECNC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQf,KAAKgB,GAGf,OAAOD,EDDKE,CAAW,EADR,IAEdR,KAAI,SAAAO,GAAC,qBAAYA,MACdE,EAAU,CAAC,EAAG,EAAG,GAAI,IAEdC,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAO5B,EAAP,KAAoB6B,EAApB,KACA,EAA8BD,mBAAS,GAAvC,mBAAO7B,EAAP,KAAgB+B,EAAhB,KAEMC,EAAY/B,EAAcD,EAAUA,EACpCiC,EAAWhC,EAAcD,EAVhB,MAYXC,EAAcD,EAEZkC,EAAYb,EAAMc,MAAMH,EAAWC,GAOzC,OACE,sBAAKpB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWZ,EADX,mBACiC+B,EAAY,EAD7C,cACoDC,EADpD,eAzBW,GAyBX,OAIA,sBAAKpB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRuB,GAAG,kBACHvB,UAAU,eACVwB,MAAOrC,EACPsC,SApBkB,SAACC,GAC3BR,GAAYQ,EAAMC,OAAOH,OACzBP,EAAe,IAaT,SAOGH,EAAQT,KAAI,SAAAuB,GAAM,OACjB,wBAAQJ,MAAK,UAAKI,GAAlB,SAA0CA,GAATA,UAKvC,uBAAOC,QAAQ,kBAAkB7B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEd,MAlDS,GAmDTC,QAASA,EACTC,YAAaA,EACbC,aAAc4B,IAEhB,6BACGI,EAAUhB,KAAI,SAAAC,GACb,OAAO,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YE3DzCwB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.92e816fb.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React from 'react';\n\ninterface Props {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n}\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const numberPag = Math.ceil(total / perPage);\n\n  function countPagination() {\n    const countArr: number[] = [];\n\n    for (let i = 1; i <= numberPag; i += 1) {\n      countArr.push(i);\n    }\n\n    return countArr;\n  }\n\n  const count = countPagination();\n\n  function changeCheck(numPage: number) {\n    if (numPage > 0 && numPage < numberPag && numPage !== currentPage) {\n      onPageChange(numPage);\n    }\n  }\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn('page-item', { disabled: currentPage === 1 })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={() => {\n            changeCheck(currentPage - 1);\n          }}\n        >\n          «\n        </a>\n      </li>\n\n      {count.map(item => (\n        <li\n          className={cn('page-item', { active: currentPage === item })}\n          key={item}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${item}`}\n            onClick={() => {\n              onPageChange(item);\n            }}\n          >\n            {item}\n          </a>\n        </li>\n      ))}\n\n      <li className={cn('page-item', { disabled: currentPage === numberPag })}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === numberPag}\n          onClick={() => {\n            changeCheck(currentPage + 1);\n          }}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst maxItems = 42;\nconst items = getNumbers(1, maxItems)\n  .map(n => `Item ${n}`);\nconst options = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n\n  const firstItem = currentPage * perPage - perPage;\n  const lastItem = currentPage * perPage > maxItems\n    ? maxItems\n    : currentPage * perPage;\n\n  const pageItems = items.slice(firstItem, lastItem);\n\n  const handlePerPageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+event.target.value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItem + 1} - ${lastItem} of ${maxItems})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handlePerPageChange}\n          >\n            {options.map(option => (\n              <option value={`${option}`} key={option}>{option}</option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={maxItems}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n      <ul>\n        {pageItems.map(item => {\n          return <li data-cy=\"item\" key={item}>{item}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}